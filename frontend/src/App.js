// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$Array from "rescript/lib/es6/array.js";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Json$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json.js";
import * as Json_Decode$JsonCombinators from "@glennsl/rescript-json-combinators/src/Json_Decode.js";

import './App.css';
;

var InvalidState = /* @__PURE__ */Caml_exceptions.create("App.InvalidState");

function make(x, y) {
  return {
          x: x,
          y: y
        };
}

var Position = {
  make: make
};

function toString(dir) {
  switch (dir) {
    case "Up" :
        return "Up";
    case "Down" :
        return "Down";
    case "Left" :
        return "Left";
    case "Right" :
        return "Right";
    
  }
}

var Direction = {
  toString: toString
};

function init() {
  return $$Array.make_matrix(15, 17, "Empty");
}

function find(pos, grid) {
  if (0 <= pos.x && pos.x < 15 || 0 <= pos.y && pos.y < 17) {
    return Caml_option.some(Caml_array.get(Caml_array.get(grid, pos.x), pos.y));
  }
  
}

function toString$1(cell) {
  switch (cell) {
    case "Snake" :
        return "snake";
    case "Food" :
        return "apple";
    case "Empty" :
        return " ";
    
  }
}

var Grid = {
  x_max: 15,
  y_max: 17,
  init: init,
  find: find,
  toString: toString$1
};

function init$1() {
  return {
          grid: $$Array.make_matrix(15, 17, "Empty"),
          score: 0,
          gameState: "Playing"
        };
}

var State = {
  init: init$1
};

function cell(str) {
  switch (str) {
    case "Food" :
        return "Food";
    case "Snake" :
        return "Snake";
    default:
      return "Empty";
  }
}

function gameState(str) {
  switch (str) {
    case "GameOver" :
        return "GameOver";
    case "Paused" :
        return "Paused";
    case "Playing" :
        return "Playing";
    default:
      throw {
            RE_EXN_ID: InvalidState,
            Error: new Error()
          };
  }
}

var state = Json_Decode$JsonCombinators.object(function (field) {
      return {
              grid: field.required("grid", Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.array(Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, cell)))),
              score: field.required("score", Json_Decode$JsonCombinators.$$int),
              gameState: field.required("gameState", Json_Decode$JsonCombinators.map(Json_Decode$JsonCombinators.string, gameState))
            };
    });

var Decode = {
  cell: cell,
  gameState: gameState,
  state: state
};

var interval = {
  contents: undefined
};

function App(Props) {
  var match = React.useState(init$1);
  var setState = match[1];
  var state$1 = match[0];
  var match$1 = React.useState(function () {
        return "Right";
      });
  var setDir = match$1[1];
  var fetchGameData = async function () {
    var response = await fetch("http://localhost:7070/game-data");
    var json = await response.json();
    var newState = Json$JsonCombinators.decode(json, state);
    if (newState.TAG === "Ok") {
      var newState$1 = newState._0;
      return setState(function (param) {
                  return newState$1;
                });
    }
    throw {
          RE_EXN_ID: InvalidState,
          Error: new Error()
        };
  };
  var postJson = async function (point, data) {
    var response = await fetch("http://localhost:7070/" + point, {
          method: "POST",
          body: Caml_option.some(Belt_Option.getExn(JSON.stringify(data))),
          headers: Caml_option.some(new Headers({
                    "Content-type": "application/json"
                  }))
        });
    return await response.json();
  };
  var initialize = function () {
    setState(function (param) {
          return init$1();
        });
    return postJson("initialize", {
                initialized: true
              });
  };
  var changeDirection = function (dir) {
    setDir(function (param) {
          return dir;
        });
    return postJson("set-direction", {
                direction: toString(dir)
              });
  };
  var startInterval = function () {
    interval.contents = Caml_option.some(setInterval((function () {
                fetchGameData();
              }), 60));
  };
  React.useEffect((function () {
          initialize();
          window.addEventListener("keydown", (function ($$event) {
                  var match = $$event.key;
                  switch (match) {
                    case "ArrowLeft" :
                    case "a" :
                    case "h" :
                        changeDirection("Left");
                        return ;
                    case "ArrowRight" :
                    case "d" :
                    case "l" :
                        changeDirection("Right");
                        return ;
                    case "ArrowDown" :
                    case "j" :
                    case "s" :
                        changeDirection("Down");
                        return ;
                    case "ArrowUp" :
                    case "k" :
                    case "w" :
                        changeDirection("Up");
                        return ;
                    default:
                      return ;
                  }
                }));
          startInterval();
          return (function () {
                    Belt_Option.map(interval.contents, (function (prim) {
                            clearInterval(prim);
                          }));
                  });
        }), []);
  return React.createElement("div", {
              className: "App"
            }, React.createElement("h1", undefined, "Snake Game"), React.createElement("h3", undefined, "Score: " + String(state$1.score)), React.createElement("h3", undefined, "Direction: " + toString(match$1[0])), React.createElement("div", {
                  style: {
                    display: "flex",
                    justifyContent: "center"
                  }
                }, React.createElement("div", {
                      style: {
                        border: "1px solid black",
                        display: "flex",
                        width: "340px",
                        flexWrap: "wrap"
                      }
                    }, Belt_Array.mapWithIndex(state$1.grid, (function (i, row) {
                            return Belt_Array.mapWithIndex(row, (function (j, cell) {
                                          var tmp;
                                          switch (cell) {
                                            case "Snake" :
                                                tmp = "green";
                                                break;
                                            case "Food" :
                                                tmp = "red";
                                                break;
                                            case "Empty" :
                                                tmp = "gray";
                                                break;
                                            
                                          }
                                          return React.createElement("div", {
                                                      style: {
                                                        backgroundColor: tmp,
                                                        height: "20px",
                                                        width: "20px"
                                                      }
                                                    });
                                        }));
                          })))), state$1.gameState === "GameOver" ? React.createElement(React.Fragment, undefined, React.createElement("h1", {
                        style: {
                          color: "red"
                        }
                      }, "Game Over!"), React.createElement("button", {
                        style: {
                          background: "lightblue",
                          border: "0",
                          fontWeight: "bold",
                          padding: "1rem"
                        },
                        onClick: (function (param) {
                            initialize();
                          })
                      }, "RETRY?")) : React.createElement(React.Fragment, undefined));
}

var tickInterval = 60;

var make$1 = App;

export {
  InvalidState ,
  Position ,
  Direction ,
  Grid ,
  State ,
  Decode ,
  interval ,
  tickInterval ,
  make$1 as make,
}
/*  Not a pure module */
